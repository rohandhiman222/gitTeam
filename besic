ls -a => get hidden files
git config -l => got all infomation you filled
git config --list => got all infomation you filled
git config --global user.name "rohan dhiman"
git config --global user.email "rohanvfx15@gmail.com"

git remote add origin repostrylinkhere
git remote -v => show list of remote
git push origin -u master => u mean upstream

git add filename => single file
git add views/*  => views folder inside all files
git add . => every files

git push origin master

git commit -am "add all files"

git branch dev1 => create new branch
git branch => got all list of branch
git checkout dev1 => change branch
git branch -D dev1 => delete branch
git checkout -b demo => create branch and checkout 

git push origin branchnamehere
after that merge this branch in master
after that switch master branch use git pull request 
git pull => use get all code of master


first work rk branch after that commit that changes
and create new branch of rk to rkfix-> so again this changes

so merge rkfix into rk
first select rk branch 
after that use (git merge rkfix)

always pull request don't use local branch 
example rk branch don't merge in master
we can merge it's not good idea
git merge rk; // we are currently in master branch


...............................................
git checkout -b features
git push origin features

// remove everything
rm -rf foldername

git branch -a => all branch local and remote control
git branch namhere =>switch branch

// remove branch from github/ remotely
don't remove it because other people also working on that
git push origin --delete features


very imporant tips 
 if we have branch on remotely we can checkout with branch name 
 example git checkout features
 if don't have so we have to create git branch branchname here after that checkout

remove from remotely branch
git push origin --delete features


git push origin -u features // upload branch on server


// already in features branch
git branch --unset-upstream

git push origin -u features

// by default we have use git pull origin form
// git push --set-upstream origin form
after we can use => git push

if change same line that time get conflit other no
conflit be care full
if work same file don't warry 

contribute any project first select (Fork) button
after that you got that reposotry inside your reposotry
make clone your reposotry now
after that create new branch work on that branch
after that changes push your branch
git push origin mybranch
we pushing our reposotry not effected origin reposotry
     